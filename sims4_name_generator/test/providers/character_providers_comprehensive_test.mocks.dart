// Mocks generated by Mockito 5.4.6 from annotations
// in sims4_name_generator/test/providers/character_providers_comprehensive_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:sims4_name_generator/models/character_profile.dart' as _i9;
import 'package:sims4_name_generator/models/enums.dart' as _i7;
import 'package:sims4_name_generator/models/name.dart' as _i2;
import 'package:sims4_name_generator/models/trait.dart' as _i3;
import 'package:sims4_name_generator/repositories/name_repository.dart' as _i5;
import 'package:sims4_name_generator/repositories/trait_repository.dart' as _i4;
import 'package:sims4_name_generator/services/character_storage_service.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeName_0 extends _i1.SmartFake implements _i2.Name {
  _FakeName_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTrait_1 extends _i1.SmartFake implements _i3.Trait {
  _FakeTrait_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTraitValidationResult_2 extends _i1.SmartFake
    implements _i4.TraitValidationResult {
  _FakeTraitValidationResult_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NameRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNameRepository extends _i1.Mock implements _i5.NameRepository {
  MockNameRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.Name>> getNames(_i7.Region? region, _i7.Gender? gender) =>
      (super.noSuchMethod(
            Invocation.method(#getNames, [region, gender]),
            returnValue: _i6.Future<List<_i2.Name>>.value(<_i2.Name>[]),
          )
          as _i6.Future<List<_i2.Name>>);

  @override
  _i6.Future<bool> hasNames(_i7.Region? region, _i7.Gender? gender) =>
      (super.noSuchMethod(
            Invocation.method(#hasNames, [region, gender]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i2.Name> generateRandomName(
    _i7.Region? region,
    _i7.Gender? gender, {
    bool? avoidDuplicates = true,
    int? maxAttempts = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateRandomName,
              [region, gender],
              {#avoidDuplicates: avoidDuplicates, #maxAttempts: maxAttempts},
            ),
            returnValue: _i6.Future<_i2.Name>.value(
              _FakeName_0(
                this,
                Invocation.method(
                  #generateRandomName,
                  [region, gender],
                  {
                    #avoidDuplicates: avoidDuplicates,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Name>);

  @override
  _i6.Future<List<_i2.Name>> generateRandomNames(
    _i7.Region? region,
    _i7.Gender? gender,
    int? count, {
    bool? avoidDuplicates = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateRandomNames,
              [region, gender, count],
              {#avoidDuplicates: avoidDuplicates},
            ),
            returnValue: _i6.Future<List<_i2.Name>>.value(<_i2.Name>[]),
          )
          as _i6.Future<List<_i2.Name>>);

  @override
  List<_i2.Name> getGenerationHistory(_i7.Region? region, _i7.Gender? gender) =>
      (super.noSuchMethod(
            Invocation.method(#getGenerationHistory, [region, gender]),
            returnValue: <_i2.Name>[],
          )
          as List<_i2.Name>);

  @override
  void clearHistory(_i7.Region? region, _i7.Gender? gender) =>
      super.noSuchMethod(
        Invocation.method(#clearHistory, [region, gender]),
        returnValueForMissingStub: null,
      );

  @override
  void clearAllHistory() => super.noSuchMethod(
    Invocation.method(#clearAllHistory, []),
    returnValueForMissingStub: null,
  );

  @override
  void setNameWeight(String? fullName, double? weight) => super.noSuchMethod(
    Invocation.method(#setNameWeight, [fullName, weight]),
    returnValueForMissingStub: null,
  );

  @override
  void setRegionWeight(_i7.Region? region, double? weight) =>
      super.noSuchMethod(
        Invocation.method(#setRegionWeight, [region, weight]),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<List<_i7.Region>> getAvailableRegions() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableRegions, []),
            returnValue: _i6.Future<List<_i7.Region>>.value(<_i7.Region>[]),
          )
          as _i6.Future<List<_i7.Region>>);

  @override
  _i6.Future<void> preloadNames(
    List<_i7.Region>? regions,
    List<_i7.Gender>? genders,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#preloadNames, [regions, genders]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  Map<String, dynamic> getCacheStats() =>
      (super.noSuchMethod(
            Invocation.method(#getCacheStats, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );

  @override
  bool hasChanged<T>(String? key, T? value) =>
      (super.noSuchMethod(
            Invocation.method(#hasChanged, [key, value]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [TraitRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTraitRepository extends _i1.Mock implements _i4.TraitRepository {
  MockTraitRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isTraitsCached =>
      (super.noSuchMethod(
            Invocation.getter(#isTraitsCached),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<List<_i3.Trait>> getAllTraits() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTraits, []),
            returnValue: _i6.Future<List<_i3.Trait>>.value(<_i3.Trait>[]),
          )
          as _i6.Future<List<_i3.Trait>>);

  @override
  _i6.Future<List<_i3.Trait>> getTraitsByCategory(
    _i7.TraitCategory? category,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTraitsByCategory, [category]),
            returnValue: _i6.Future<List<_i3.Trait>>.value(<_i3.Trait>[]),
          )
          as _i6.Future<List<_i3.Trait>>);

  @override
  _i6.Future<List<_i3.Trait>> getTraitsByPack(String? pack) =>
      (super.noSuchMethod(
            Invocation.method(#getTraitsByPack, [pack]),
            returnValue: _i6.Future<List<_i3.Trait>>.value(<_i3.Trait>[]),
          )
          as _i6.Future<List<_i3.Trait>>);

  @override
  _i6.Future<_i3.Trait?> getTraitById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTraitById, [id]),
            returnValue: _i6.Future<_i3.Trait?>.value(),
          )
          as _i6.Future<_i3.Trait?>);

  @override
  _i6.Future<_i3.Trait?> findTraitById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#findTraitById, [id]),
            returnValue: _i6.Future<_i3.Trait?>.value(),
          )
          as _i6.Future<_i3.Trait?>);

  @override
  bool areTraitsCompatible(List<_i3.Trait>? traits) =>
      (super.noSuchMethod(
            Invocation.method(#areTraitsCompatible, [traits]),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<List<_i3.Trait>> generateRandomTraits({
    int? maxTraits = 3,
    bool? avoidDuplicates = true,
    List<_i7.TraitCategory>? preferredCategories,
    List<String>? preferredPacks,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#generateRandomTraits, [], {
              #maxTraits: maxTraits,
              #avoidDuplicates: avoidDuplicates,
              #preferredCategories: preferredCategories,
              #preferredPacks: preferredPacks,
            }),
            returnValue: _i6.Future<List<_i3.Trait>>.value(<_i3.Trait>[]),
          )
          as _i6.Future<List<_i3.Trait>>);

  @override
  _i6.Future<List<_i3.Trait>> generateRandomTraitsByCategory(
    _i7.TraitCategory? category, {
    int? maxTraits = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateRandomTraitsByCategory,
              [category],
              {#maxTraits: maxTraits},
            ),
            returnValue: _i6.Future<List<_i3.Trait>>.value(<_i3.Trait>[]),
          )
          as _i6.Future<List<_i3.Trait>>);

  @override
  _i6.Future<List<_i3.Trait>> getCompatibleTraits(
    List<_i3.Trait>? existingTraits,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCompatibleTraits, [existingTraits]),
            returnValue: _i6.Future<List<_i3.Trait>>.value(<_i3.Trait>[]),
          )
          as _i6.Future<List<_i3.Trait>>);

  @override
  _i6.Future<List<_i3.Trait>> getConflictingTraits(_i3.Trait? trait) =>
      (super.noSuchMethod(
            Invocation.method(#getConflictingTraits, [trait]),
            returnValue: _i6.Future<List<_i3.Trait>>.value(<_i3.Trait>[]),
          )
          as _i6.Future<List<_i3.Trait>>);

  @override
  _i6.Future<_i3.Trait> generateRandomTraitCompatibleWith(
    List<_i3.Trait>? existingTraits,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateRandomTraitCompatibleWith, [
              existingTraits,
            ]),
            returnValue: _i6.Future<_i3.Trait>.value(
              _FakeTrait_1(
                this,
                Invocation.method(#generateRandomTraitCompatibleWith, [
                  existingTraits,
                ]),
              ),
            ),
          )
          as _i6.Future<_i3.Trait>);

  @override
  _i6.Future<List<_i7.TraitCategory>> getAvailableCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableCategories, []),
            returnValue: _i6.Future<List<_i7.TraitCategory>>.value(
              <_i7.TraitCategory>[],
            ),
          )
          as _i6.Future<List<_i7.TraitCategory>>);

  @override
  _i6.Future<List<String>> getAvailablePacks() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailablePacks, []),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);

  @override
  _i6.Future<List<_i3.Trait>> searchTraits(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchTraits, [query]),
            returnValue: _i6.Future<List<_i3.Trait>>.value(<_i3.Trait>[]),
          )
          as _i6.Future<List<_i3.Trait>>);

  @override
  _i6.Future<Map<String, dynamic>> getTraitStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getTraitStatistics, []),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<_i4.TraitValidationResult> validateTraitCombination(
    List<_i3.Trait>? traits,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validateTraitCombination, [traits]),
            returnValue: _i6.Future<_i4.TraitValidationResult>.value(
              _FakeTraitValidationResult_2(
                this,
                Invocation.method(#validateTraitCombination, [traits]),
              ),
            ),
          )
          as _i6.Future<_i4.TraitValidationResult>);

  @override
  void setTraitWeight(String? traitId, double? weight) => super.noSuchMethod(
    Invocation.method(#setTraitWeight, [traitId, weight]),
    returnValueForMissingStub: null,
  );

  @override
  void setCategoryWeight(_i7.TraitCategory? category, double? weight) =>
      super.noSuchMethod(
        Invocation.method(#setCategoryWeight, [category, weight]),
        returnValueForMissingStub: null,
      );

  @override
  void setPackWeight(String? pack, double? weight) => super.noSuchMethod(
    Invocation.method(#setPackWeight, [pack, weight]),
    returnValueForMissingStub: null,
  );

  @override
  void clearTraitWeights() => super.noSuchMethod(
    Invocation.method(#clearTraitWeights, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearCategoryWeights() => super.noSuchMethod(
    Invocation.method(#clearCategoryWeights, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearPackWeights() => super.noSuchMethod(
    Invocation.method(#clearPackWeights, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearGenerationHistory() => super.noSuchMethod(
    Invocation.method(#clearGenerationHistory, []),
    returnValueForMissingStub: null,
  );

  @override
  List<List<_i3.Trait>> getGenerationHistory() =>
      (super.noSuchMethod(
            Invocation.method(#getGenerationHistory, []),
            returnValue: <List<_i3.Trait>>[],
          )
          as List<List<_i3.Trait>>);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<int> getTraitCount() =>
      (super.noSuchMethod(
            Invocation.method(#getTraitCount, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<Map<String, dynamic>> getEnhancedStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getEnhancedStatistics, []),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);
}

/// A class which mocks [CharacterStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterStorageService extends _i1.Mock
    implements _i8.CharacterStorageService {
  MockCharacterStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> saveCharacter(_i9.CharacterProfile? character) =>
      (super.noSuchMethod(
            Invocation.method(#saveCharacter, [character]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i9.CharacterProfile>> getSavedCharacters() =>
      (super.noSuchMethod(
            Invocation.method(#getSavedCharacters, []),
            returnValue: _i6.Future<List<_i9.CharacterProfile>>.value(
              <_i9.CharacterProfile>[],
            ),
          )
          as _i6.Future<List<_i9.CharacterProfile>>);

  @override
  _i6.Future<void> deleteSavedCharacter(_i9.CharacterProfile? character) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSavedCharacter, [character]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> addToFavorites(_i9.CharacterProfile? character) =>
      (super.noSuchMethod(
            Invocation.method(#addToFavorites, [character]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeFromFavorites(_i9.CharacterProfile? character) =>
      (super.noSuchMethod(
            Invocation.method(#removeFromFavorites, [character]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i9.CharacterProfile>> getFavoriteCharacters() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteCharacters, []),
            returnValue: _i6.Future<List<_i9.CharacterProfile>>.value(
              <_i9.CharacterProfile>[],
            ),
          )
          as _i6.Future<List<_i9.CharacterProfile>>);

  @override
  _i6.Future<bool> isFavorite(_i9.CharacterProfile? character) =>
      (super.noSuchMethod(
            Invocation.method(#isFavorite, [character]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> addToHistory(_i9.CharacterProfile? character) =>
      (super.noSuchMethod(
            Invocation.method(#addToHistory, [character]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i9.CharacterProfile>> getCharacterHistory() =>
      (super.noSuchMethod(
            Invocation.method(#getCharacterHistory, []),
            returnValue: _i6.Future<List<_i9.CharacterProfile>>.value(
              <_i9.CharacterProfile>[],
            ),
          )
          as _i6.Future<List<_i9.CharacterProfile>>);

  @override
  _i6.Future<void> clearHistory() =>
      (super.noSuchMethod(
            Invocation.method(#clearHistory, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> clearSavedCharacters() =>
      (super.noSuchMethod(
            Invocation.method(#clearSavedCharacters, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> clearFavorites() =>
      (super.noSuchMethod(
            Invocation.method(#clearFavorites, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  String exportCharacter(_i9.CharacterProfile? character) =>
      (super.noSuchMethod(
            Invocation.method(#exportCharacter, [character]),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.method(#exportCharacter, [character]),
            ),
          )
          as String);

  @override
  String exportCharacters(List<_i9.CharacterProfile>? characters) =>
      (super.noSuchMethod(
            Invocation.method(#exportCharacters, [characters]),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.method(#exportCharacters, [characters]),
            ),
          )
          as String);

  @override
  _i6.Future<Map<String, int>> getStorageStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageStatistics, []),
            returnValue: _i6.Future<Map<String, int>>.value(<String, int>{}),
          )
          as _i6.Future<Map<String, int>>);
}
